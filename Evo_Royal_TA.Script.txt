/**
 *	Royal Time Attack mode
 */
#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextBase.Script.txt"

#Const CompatibleMapTypes	"TrackMania\\TM_Royal,TM_Royal"
#Const Version						"2021-06-02-evo0.1.1"
#Const ScriptName					"Evo_Royal_TA"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/RoyalTimeAttack/RoyalTimeAttack.Script.txt" as RoyalTimeAttack
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/RoyalTimeAttack/StateManager.Script.txt" as StateMgr
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Checkpoint_Server.Script.txt" as UIModules_Checkpoint
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PauseMenuOnline_Server.Script.txt" as UIModules_PauseMenu_Online
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Server.Script.txt" as UIModules_ScoresTable
#Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2.Script.txt" as XmlRpc

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Settings
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Setting S_TimeLimit 150 as _("Time limit") //< Time limit before going to the next map
#Setting S_ScriptEnvironment "development"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ModeName "Evo Royal TA"
//L16N [Royal Time Attack] Description of the mode rules
#Const Description _("""Players must complete as many segments as possible as quickly as possible. Modified version by Evo.""")

#Const C_HudModulePath "" //< Path to the hud module
#Const C_ManiaAppUrl "file://Media/ManiaApps/Nadeo/TMNext/TrackMania/RoyalTimeAttack/RoyalTimeAttack.Script.txt" //< Url of the mania app
#Const C_FakeUsersNb 0
#Const C_EmptyArmorCheckInterval 250 //< Frequency of the empty armor check

#Const C_TotalSegments 5

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Callbacks
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_Callback_Royal_PlayerFinish "Royal.PlayerFinish"
#Const C_Callback_Royal_PlayerFinishSegment "Royal.PlayerFinishSegment"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void XmlRpcSendRoyalPlayerFinish(CSmPlayer _Player, Integer _Time) {
	declare Response = """{
	"login": {{{XmlRpc::JsonGetText(_Player.User.Login)}}},
	"racetime": {{{XmlRpc::JsonGetInteger(_Time)}}}
}""";
	XmlRpc::SendCallback(C_Callback_Royal_PlayerFinish, [Response]);
}

Void XmlRpcSendRoyalPlayerFinishSegment(CSmPlayer _Player, Integer _Time, Integer _SegmentCount) {
	declare Integer CurrentSegment = (_SegmentCount - 1) % C_TotalSegments + 1;
	declare Response = """{
	"login": {{{XmlRpc::JsonGetText(_Player.User.Login)}}},
	"racetime": {{{XmlRpc::JsonGetInteger(_Time)}}},
	"segment": {{{XmlRpc::JsonGetInteger(CurrentSegment)}}}
}""";
	XmlRpc::SendCallback(C_Callback_Royal_PlayerFinishSegment, [Response]);
}

Integer GetSegmentCount(CSmPlayer _Player) {
	declare Integer[] RoyalTimeAttack_SegmentTimes for _Player.Score = [];
	return RoyalTimeAttack_SegmentTimes.count;
}

Void CheckRoyalRacetime(CSmPlayer _Player, Integer _RaceTime, Integer _MapStartTime) {
	declare Integer RoyalTimeAttack_FirstSegmentStartTime for _Player.Score;
	declare Integer MapTime = _Player.StartTime - RoyalTimeAttack_FirstSegmentStartTime + _RaceTime;

	declare Integer SegmentCount = GetSegmentCount(_Player);

	Log::Log("""
	Segment Count: {{{SegmentCount}}}
	Map Time: {{{MapTime}}}
	Race Time: {{{_RaceTime}}}
	Map Start Time: {{{_MapStartTime}}}
	Player Start Time: {{{_Player.StartTime}}},
	Player FirstSeg Start Time: {{{RoyalTimeAttack_FirstSegmentStartTime}}},
""");

	if (SegmentCount % C_TotalSegments == 0) {
		XmlRpcSendRoyalPlayerFinish(_Player, MapTime);
		Log::Log("Player finished the whole map.");
		Log::Log("""Time spent: {{{MapTime}}}""");
	}

	XmlRpcSendRoyalPlayerFinishSegment(_Player, MapTime, SegmentCount);
}

Void SetPlayerStartTime(CSmPlayer _Player) {
	declare Integer SegmentCount = GetSegmentCount(_Player);

	Log::Log("""[SetPlayerStartTime] Segment Count: {{{SegmentCount}}}""");

	if (SegmentCount % C_TotalSegments == 0) {
		declare Integer RoyalTimeAttack_FirstSegmentStartTime for _Player.Score;
		RoyalTimeAttack_FirstSegmentStartTime = Now;

		Log::Log("""RoyalTimeAttack_FirstSegmentStartTime = {{{RoyalTimeAttack_FirstSegmentStartTime}}}""");
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Extends
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
Log::RegisterScript(StateMgr::ScriptName, StateMgr::Version);
Log::RegisterScript(UIModules_Checkpoint::ScriptName, UIModules_Checkpoint::Version);
Log::RegisterScript(UIModules_PauseMenu_Online::ScriptName, UIModules_PauseMenu_Online::Version);
Log::RegisterScript(UIModules_ScoresTable::ScriptName, UIModules_ScoresTable::Version);
Log::RegisterScript(RoyalTimeAttack::ScriptName, RoyalTimeAttack::Version);
***

***Match_LoadLibraries***
***
StateMgr::Load();
RoyalTimeAttack::Load();

// register xmlrpc callbacks
XmlRpc::RegisterCallback(C_Callback_Royal_PlayerFinish, """
* Name: {{{C_Callback_Royal_PlayerFinish}}}
* Type: CallbackArray
* Description: Callback sent when a player finishes all segments.
* Data:
	- Version >=2.0.0:
	```
	[
		{
			"login": "player-login", // The login id of the player
			"racetime" 12345 // the time the player took from first segment to last.
		}
	]
	```
""");

XmlRpc::RegisterCallback(C_Callback_Royal_PlayerFinishSegment, """
* Name: {{{C_Callback_Royal_PlayerFinishSegment}}}
* Type: CallbackArray
* Description: Callback sent when a player finishes all segments.
* Data:
	- Version >=2.0.0:
	```
	[
		{
			"login": "player-login", // The login id of the player
			"racetime" 12345 // the time the player took to the current segment
			"segment": <n> // The current segment the player finished
		}
	]
	```
""");
***

***Match_UnloadLibraries***
***
RoyalTimeAttack::Unload();
StateMgr::Unload();
***

***Match_Settings***
***
MB_Settings_UseDefaultHud = (C_HudModulePath == "");
MB_Settings_UseDefaultTimer = False;
***

***Match_Rules***
***
ModeInfo::SetName(C_ModeName);
ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
ModeInfo::SetRules(Description);
ModeInfo::SetStatusMessage("");
***

***Match_LoadHud***
***
if (C_HudModulePath != "") Hud_Load(C_HudModulePath);
***

***Match_AfterLoadHud***
***
ClientManiaAppUrl = C_ManiaAppUrl;
Race::SortScores(Race::C_Sort_TotalPoints);
UIModules_PauseMenu_Online::SetHelp(Description);
UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_RaceProgression);
UIModules_Checkpoint::SetVisibleFor(UIModules_Checkpoint::C_Target_None);
***

***Match_Yield***
***
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		// Initialize players when they join the server
		case CSmModeEvent::EType::OnPlayerAdded: {
			StateMgr::InitializePlayer(Event.Player);
			RoyalTimeAttack::InitializePlayer(Event.Player);
		}
	}
}

StateMgr::Yield();
RoyalTimeAttack::Yield();
***

***Match_StartServer***
***
// Initialize mode
Clans::SetClansNb(0);
Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_AlwaysGiveUp);
StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
WarmUp::SetAvailability(False);
CarRank::Reset();

// Initialize network
CrudeExtrapolation_AllowDelay = True; //< Allow a delay on the opponents position to get a better extrapolation
***

***Match_InitMap***
***
declare CMapLandmark[] Map_Starts;
declare Integer Map_NextEmptyArmorCheckTime;

// Find start blocks
{
	declare CMapLandmark[] Starts = Map::GetStarts();
	declare CMapLandmark[Integer] SortedStarts;
	foreach (Start in Starts) {
		SortedStarts[Start.Order] = Start;
	}
	SortedStarts = SortedStarts.sortkey();
	foreach (Start in SortedStarts) {
		Map_Starts.add(Start);
	}
	
	if (Map_Starts.count > 0) {
		Map::SetDefaultStart(Map_Starts[0]);
	}
}

CarRank::Reset();
***

***Match_StartMap***
***
// Add bot when necessary
Users_SetNbFakeUsers(C_FakeUsersNb, 0);

// Reset race progression
foreach (Score in Scores) {
	RoyalTimeAttack::ResetSegmentTimes(Score);
}

if (Map_Starts.count > 0) {
	// Initialize race
	// `Player.StartTime` will always be rounded to the next tenth of a second (9627 -> 9700)
	// For the first spawn of the map we do this to the `StartTime` too, so both values are synchronized
	StartTime = ((Now + Race::C_SpawnDuration) / 100 * 100) + 100;
	if (S_TimeLimit > 0) {
		EndTime = StartTime + (S_TimeLimit * 1000);
	} else {
		EndTime = -1;
	}
	Map_NextEmptyArmorCheckTime = StartTime + C_EmptyArmorCheckInterval;
	UpdateScoresTableHeader(S_TimeLimit);
	
	// Spawn players for the race
	foreach (Player in Players) {
		if (Race::IsReadyToStart(Player)) {
			RoyalTimeAttack::Start(Map_Starts, Player, StartTime, StartTime);
		}
	}
	
	StateMgr::ForcePlayersStates([StateMgr::C_State_Playing]);
	RoyalTimeAttack::UpdateRanking();
} else {
	StartTime = -1;
	EndTime = -1;
	StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
	RoyalTimeAttack::UpdateRanking();
	
	//L16N [Royal Time Attack] The current map is not valid, it will be skipped.
	UIManager.UIAll.QueueMessage(3000, 1, CUIConfig::EMessageDisplay::Big, _("This map is not valid"));
	MB_Sleep(3000);
	MB_StopMap();
}
***

***Match_PlayLoop***
***
// Manage race events
declare RacePendingEvents = Race::GetPendingEvents();
foreach (Event in RacePendingEvents) {
	Race::ValidEvent(Event);

	if (Event.Type == Events::C_Type_StartLine) {
		Log::Log("""Event: {{{Event.Type}}}""");
		SetPlayerStartTime(Event.Player);
	}
	
	// Waypoint
	else if (Event.Type == Events::C_Type_Waypoint) {
		if (Event.Player != Null) {
			if (Event.IsEndRace) {
				RoyalTimeAttack::CompleteSegment(Event.Player, Event.RaceTime, StartTime);
				RoyalTimeAttack::ThrottleUpdateRanking();
				Race::StopSkipScoresTable(Event.Player);
				CheckRoyalRacetime(Event.Player, Event.RaceTime, StartTime);
			}
		}
	}
}

// Manage mode events
foreach (Event in PendingEvents) {
	if (Event.HasBeenPassed || Event.HasBeenDiscarded) continue;
	Events::Invalid(Event);
}

// Spawn players
if (PlayersNbDead > 0) { //< Check for unspawned players only if at least one player is unspawned
	foreach (Player in Players) {
		if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && Race::IsReadyToStart(Player)) {
			RoyalTimeAttack::Start(Map_Starts, Player, StartTime);
		}
	}
}

// Check if a player was eliminated by an obstacle
if (Now >= Map_NextEmptyArmorCheckTime) {
	Map_NextEmptyArmorCheckTime = Now + C_EmptyArmorCheckInterval;
	foreach (Player in Players) {
		if (
			Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned &&
			Player.Armor <= 0 &&
			Race::IsRacing(Player)
		) {
			Race::StopSkipScoresTable(Player);
		}
	}
}

// Stop map if time limit is reached
if (EndTime > 0 && Now >= EndTime) MB_StopMap();
***

***Match_EndMap***
***
if (Map_Starts.count > 0) {
	// Ensure that we stop the match (after a vote for the next map, ...)
	MB_StopMatch();
	Race::StopSkipOutroAll();
	EndTime = -1;
	
	StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
	
	RoyalTimeAttack::UpdateRanking();
	Race::SortScores(Race::C_Sort_TotalPoints);
	Scores::SetPlayerWinner(Scores::GetBestPlayer(Scores::C_Sort_MatchPoints));
} else {
	MB_SkipPodiumSequence();
}
***

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the info in the scores table header
Void UpdateScoresTableHeader(Integer _TimeLimit) {
	if (_TimeLimit > 0) {
		//L16N [Royal Time Attack] The duration of one map. %1 will be replaced by a duration in minutes and seconds. eg: "Time limit 2:30".
		UIModules_ScoresTable::SetFooterInfo(TL::Compose(_("Time limit %1"), TL::TimeToText(_TimeLimit * 1000)));
	} else {
		UIModules_ScoresTable::SetFooterInfo("");
	}
}